let contentData = null;

// Load content from JSON
async function loadContent() {
  try {
    const response = await fetch('/content.json');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    contentData = await response.json();
    console.log('Content loaded successfully:', contentData);
    return contentData;
  } catch (error) {
    console.error('Error loading content:', error);
    return null;
  }
}

async function loadProjects() {
  if (!contentData) {
    await loadContent();
  }
  if (contentData && contentData.projects) {
    renderProjects(contentData.projects);
    setupFiltering();
  }
}

function renderProjects(projects) {
  const container = document.getElementById("project-grid");
  if (!container) {
    console.log('Project grid container not found - skipping project rendering');
    return;
  }
  
  container.innerHTML = "";

  projects.forEach((project) => {
    const tagList = project.tags.join(" ");
    const iconList = project.icons
      .map((icon) => `<i class="${icon}"></i>`)
      .join("\n");
    
    // Check if link exists and is not just "#"
    const hasValidLink = project.link && project.link !== "#" && project.link.trim() !== "";
    const isWebsite = hasValidLink && project.link.includes("http") && !project.link.includes("github");
    
    // Create link HTML only if valid link exists
    const linkHTML = hasValidLink ? `
      <a href="${project.link}" target="_blank" class="text-sm text-blue-400 hover:text-blue-300 flex items-center">
        <i class="${isWebsite ? "fas fa-link" : "fab fa-github"} mr-1"></i>${isWebsite ? "Website" : "GitHub"}
      </a>
    ` : '';

    const card = document.createElement("div");
    card.className = "project-card";
    card.setAttribute("data-category", tagList);
    card.setAttribute("data-aos", "fade-up");
    card.setAttribute("data-aos-delay", "100");
    const detailedDesc = project.detailedDescription || project.description;
    
    card.innerHTML = `
        <div class="bg-white/5 backdrop-blur-lg border border-zinc-700 rounded-2xl overflow-hidden shadow-md hover:shadow-xl transition-transform duration-500 hover:-translate-y-1 h-full flex flex-col">
          <img src="${project.image}" alt="${project.title}" class="w-full h-48 object-cover flex-shrink-0" />
          <div class="p-6 flex flex-col flex-1">
            <h3 class="text-xl font-semibold mb-2">${project.title}</h3>
            <p class="text-sm text-zinc-300 mb-4">${project.description}</p>
            
            <!-- Collapsible Details -->
            <div class="mb-4">
              <button class="text-xs px-3 py-1.5 bg-zinc-800/50 border border-zinc-700 text-blue-400 hover:bg-blue-500/10 hover:border-blue-500/30 rounded-md transition-all flex items-center gap-1.5 w-fit" onclick="const parent = this.closest('.project-card'); const detail = this.nextElementSibling; detail.classList.toggle('hidden'); this.querySelector('.toggle-icon').classList.toggle('rotate-90'); if(!detail.classList.contains('hidden')) { parent.style.gridRowEnd = 'span 2'; } else { parent.style.gridRowEnd = 'auto'; }">
                <span>Read more</span>
                <i class="fas fa-chevron-right toggle-icon transition-transform duration-200 text-[10px]"></i>
              </button>
              <div class="hidden mt-3 text-xs text-zinc-400 bg-zinc-800/70 p-4 rounded-lg border border-zinc-700/50 max-h-96 overflow-y-auto">
                ${detailedDesc}
              </div>
            </div>
            
            <div class="mt-auto pt-4 border-t border-zinc-700/50">
              <div class="flex justify-between items-center">
                <div class="flex space-x-3 text-lg text-blue-400">${iconList}</div>
                ${linkHTML}
              </div>
            </div>
          </div>
        </div>`;
    container.appendChild(card);
  });
}

function setupFiltering() {
  const filterButtons = document.querySelectorAll(".filter-btn");
  if (filterButtons.length === 0) {
    console.log('No filter buttons found - skipping filtering setup');
    return;
  }

  filterButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const category = button.getAttribute("data-category");
      filterProjects(category);

      filterButtons.forEach((btn) => {
        btn.classList.remove("active", "bg-blue-600");
        btn.classList.add("bg-zinc-800");
      });

      button.classList.add("active", "bg-blue-600");
      button.classList.remove("bg-zinc-800");
    });
  });

  // Default to show all
  filterProjects("all");
}

function filterProjects(category) {
  const cards = document.querySelectorAll(".project-card");
  cards.forEach((card) => {
    const matches =
      category === "all" || card.dataset.category.includes(category);
    card.style.display = matches ? "block" : "none";
  });
}

// Initialize typed.js for hero section
function initTyped() {
  if (!contentData || !contentData.hero) return;
  
  const typedElement = document.getElementById("typed-output");
  if (typedElement) {
    new Typed("#typed-output", {
      strings: contentData.hero.typedStrings,
      typeSpeed: 50,
      backSpeed: 30,
      backDelay: 2000,
      loop: true,
    });
  }
}

// Populate hero section
function populateHero() {
  if (!contentData) {
    console.log('No content data available for hero');
    return;
  }
  
  const { personal, hero } = contentData;
  console.log('Populating hero section...');
  
  // Update hero name
  const heroName = document.querySelector('.hero-name');
  if (heroName) {
    heroName.innerHTML = `Hi, I'm <span class="text-blue-400">${personal.name}</span>`;
    console.log('Hero name updated');
  }
  
  // Update bio
  const heroBio = document.querySelector('.hero-bio');
  if (heroBio) {
    heroBio.innerHTML = hero.bio;
    console.log('Hero bio updated');
  }
  
  // Update avatar
  const avatar = document.querySelector('.hero-avatar');
  if (avatar) {
    avatar.src = personal.avatar;
    console.log('Avatar updated');
  }
}

// Populate core expertise section
function populateCoreExpertise() {
  if (!contentData || !contentData.coreExpertise) {
    console.log('No content data available for core expertise');
    return;
  }
  
  const container = document.querySelector('.core-expertise-grid');
  if (!container) {
    console.log('Core expertise container not found');
    return;
  }
  
  console.log('Populating core expertise...');
  container.innerHTML = '';
  contentData.coreExpertise.forEach((skill, index) => {
    const card = document.createElement('div');
    card.setAttribute('data-aos', 'fade-up');
    card.setAttribute('data-aos-delay', '100');
    card.className = 'group bg-white/5 backdrop-blur-lg border border-zinc-700 rounded-2xl p-6 transition duration-500 ease-[cubic-bezier(0.175,0.885,0.32,1.275)] hover:-translate-y-1 hover:scale-[1.02] hover:shadow-xl hover:shadow-blue-500/20 hover:border-blue-500 hover:bg-white/10';
    
    card.innerHTML = `
      <div class="flex items-center space-x-4 mb-4">
        <div class="text-3xl text-${skill.color} group-hover:text-white transition duration-500 ease-in-out group-hover:scale-110">
          <i class="${skill.icon}"></i>
        </div>
        <h3 class="text-lg font-semibold tracking-wide text-white">${skill.title}</h3>
      </div>
      <div class="h-0.5 w-full bg-zinc-700 mb-4 rounded"></div>
      <div class="text-sm text-zinc-300 space-y-2 pl-1">
        ${skill.items.map(item => `<p><i class="fas fa-check-circle text-blue-400 mr-2"></i>${item}</p>`).join('')}
      </div>
    `;
    container.appendChild(card);
  });
}

// Populate featured projects carousel
function populateFeaturedProjects() {
  if (!contentData || !contentData.featuredProjects) {
    console.log('No featured projects data available');
    return;
  }
  
  const swiperWrapper = document.querySelector('.swiper-wrapper');
  if (!swiperWrapper) {
    console.log('Swiper wrapper not found');
    return;
  }
  
  console.log('Populating featured projects...');
  swiperWrapper.innerHTML = '';
  
  contentData.featuredProjects.forEach(project => {
    const slide = document.createElement('div');
    slide.className = 'swiper-slide bg-white/5 backdrop-blur-lg border border-zinc-700 rounded-2xl overflow-hidden shadow-md hover:shadow-xl transition-transform duration-500 hover:-translate-y-1';
    
    const linkIcon = project.linkType === 'website' ? 'fas fa-external-link-alt' : 'fab fa-github';
    const linkText = project.linkType === 'website' ? 'Visit Site' : 'View on GitHub';
    const detailedDesc = project.detailedDescription || project.description;
    
    slide.innerHTML = `
      <img
        src="${project.image}"
        alt="${project.title}"
        class="w-full h-48 object-cover object-top rounded-t-2xl"
      />
      <div class="p-6 flex flex-col">
        <h3 class="text-xl font-semibold mb-2">${project.title}</h3>
        <p class="text-sm text-zinc-300 mb-4">${project.description}</p>
        
        <!-- Collapsible Details -->
        <div class="mb-4">
          <button class="text-xs px-3 py-1.5 bg-zinc-800/50 border border-zinc-700 text-blue-400 hover:bg-blue-500/10 hover:border-blue-500/30 rounded-md transition-all flex items-center gap-1.5 w-fit" onclick="this.nextElementSibling.classList.toggle('hidden'); this.querySelector('.toggle-icon').classList.toggle('rotate-90')">
            <span>Read more</span>
            <i class="fas fa-chevron-right toggle-icon transition-transform duration-200 text-[10px]"></i>
          </button>
          <div class="hidden mt-3 text-xs text-zinc-400 bg-zinc-800/70 p-4 rounded-lg border border-zinc-700/50 max-h-80 overflow-y-auto">
            ${detailedDesc}
          </div>
        </div>
        
        <div class="mt-auto pt-4 border-t border-zinc-700/50">
          <div class="flex space-x-4 text-lg text-${project.iconColor} mb-4">
            ${project.icons.map(icon => `<i class="${icon}"></i>`).join('\n          ')}
          </div>
          <div class="flex space-x-3">
            <a
              href="${project.link}"
              target="_blank"
              class="inline-flex items-center px-3 py-1.5 bg-zinc-800 hover:bg-zinc-700 text-white text-sm font-medium rounded-md transition"
            >
              <i class="${linkIcon} mr-2"></i> ${linkText}
            </a>
          </div>
        </div>
      </div>
    `;
    swiperWrapper.appendChild(slide);
  });
}

// Populate about page
function populateAbout() {
  if (!contentData) return;
  
  // Summary
  const summary = document.querySelector('.about-summary');
  if (summary) summary.textContent = contentData.about.summary;
  
  // Education
  const educationContainer = document.querySelector('.education-container');
  if (educationContainer && contentData.education) {
    educationContainer.innerHTML = '';
    contentData.education.forEach(edu => {
      const eduCard = document.createElement('div');
      eduCard.className = 'bg-gray-800/70 backdrop-blur-sm p-6 rounded-xl shadow-lg';
      eduCard.innerHTML = `
        <div class="flex flex-col md:flex-row justify-between md:items-start">
          <div>
            <h3 class="text-xl font-semibold text-white">${edu.degree}</h3>
            <p class="text-gray-300">${edu.institution} — ${edu.location}</p>
          </div>
          <div class="text-sm text-gray-400 italic mt-2 md:mt-0 md:text-right">
            <p>${edu.duration}</p>
            <p>GPA: ${edu.gpa}</p>
          </div>
        </div>
        <p class="text-sm text-gray-400 mt-3">Coursework: ${edu.coursework}</p>
      `;
      educationContainer.appendChild(eduCard);
    });
  }
  
  // Experience
  populateExperience();
  
  // Publications
  const publicationsContainer = document.querySelector('.publications-container');
  if (publicationsContainer && contentData.publications) {
    publicationsContainer.innerHTML = '';
    contentData.publications.forEach(pub => {
      const pubCard = document.createElement('div');
      pubCard.className = 'bg-gray-800/70 backdrop-blur-sm p-5 rounded-xl shadow-md hover:shadow-blue-400/30 transition';
      pubCard.innerHTML = `
        <h3 class="text-lg text-white font-semibold mb-1">
          <a href="${pub.doi}" target="_blank" class="hover:underline">${pub.title}</a>
        </h3>
        <p class="text-gray-300 text-sm mb-1">${pub.authors}</p>
        <p class="text-gray-400 text-xs">${pub.venue}</p>
        <p class="text-gray-400 text-xs italic mt-2">${pub.description}</p>
      `;
      publicationsContainer.appendChild(pubCard);
    });
  }
  
  // Key Projects
  const keyProjectsContainer = document.querySelector('.key-projects-container');
  if (keyProjectsContainer && contentData.keyProjects) {
    keyProjectsContainer.innerHTML = '';
    contentData.keyProjects.forEach(project => {
      const projectCard = document.createElement('div');
      projectCard.className = 'bg-gray-800/70 backdrop-blur-sm p-6 rounded-xl shadow-lg hover:shadow-blue-400/30 transition duration-300';
      projectCard.innerHTML = `
        <h3 class="text-xl font-semibold text-white mb-2">${project.title}</h3>
        <p class="text-gray-300 text-sm">${project.description}</p>
        <div class="flex justify-between items-center mt-4 flex-wrap gap-2 text-xs">
          <div class="flex flex-wrap gap-2">
            ${project.tags.map(tag => `<span class="bg-blue-500/20 text-blue-300 px-3 py-1 rounded-full">${tag}</span>`).join('')}
          </div>
          <a href="${project.link}" class="text-sm text-blue-400 hover:underline whitespace-nowrap" target="_blank">
            ${project.link.includes('github') ? 'GitHub' : 'Visit'}
          </a>
        </div>
      `;
      keyProjectsContainer.appendChild(projectCard);
    });
  }
  
  // Skills
  const skillsSection = document.querySelector('#skills');
  if (skillsSection && contentData.skills) {
    const skillsContainer = document.createElement('div');
    skillsContainer.className = 'max-w-5xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6';
    
    Object.keys(contentData.skills).forEach(category => {
      const skillCard = document.createElement('div');
      skillCard.className = 'bg-gray-800/70 backdrop-blur-sm p-5 rounded-xl shadow-lg';
      skillCard.innerHTML = `
        <h3 class="text-lg font-semibold text-white mb-4 border-b border-blue-400/30 pb-2">${category}</h3>
        <div class="flex flex-wrap gap-2">
          ${contentData.skills[category].map(skill => `
            <span class="flex items-center gap-2 bg-zinc-700/50 px-3 py-1.5 rounded-md text-sm text-zinc-300">
              ${skill.icon ? `<i class="${skill.icon} text-blue-400"></i>` : ''}
              <span>${skill.name}</span>
            </span>
          `).join('')}
        </div>
      `;
      skillsContainer.appendChild(skillCard);
    });
    
    skillsSection.appendChild(skillsContainer);
  }
}

// Populate experience section
function populateExperience() {
  if (!contentData || !contentData.experience) return;
  
  // Desktop timeline
  const desktopTimeline = document.querySelector('.experience-timeline');
  if (desktopTimeline) {
    desktopTimeline.innerHTML = '';
    contentData.experience.forEach((exp, index) => {
      const isLeft = index % 2 === 0;
      const expItem = document.createElement('div');
      expItem.className = 'mb-16 flex flex-col md:flex-row justify-between items-center';
      
      if (isLeft) {
        expItem.innerHTML = `
          <div class="md:w-5/12 text-sm text-gray-400 text-right md:pr-10 order-1 md:order-none">
            <p class="italic text-base md:text-lg text-gray-400">${exp.duration}</p>
          </div>
          <div class="w-4 h-4 bg-blue-400 border-2 border-white rounded-full z-10"></div>
          <div class="md:w-5/12 bg-gray-800/70 backdrop-blur-sm p-5 rounded-xl shadow-lg mt-5 md:mt-0">
            <h3 class="text-xl font-semibold text-white">${exp.title}</h3>
            <p class="text-gray-300">${exp.company} — ${exp.location}</p>
            <ul class="list-disc text-gray-400 text-sm mt-3 ml-5 space-y-1">
              ${exp.responsibilities.map(resp => `<li>${resp}</li>`).join('')}
            </ul>
          </div>
        `;
      } else {
        expItem.innerHTML = `
          <div class="md:w-5/12 bg-gray-800/70 backdrop-blur-sm p-5 rounded-xl shadow-lg mt-5 md:mt-0">
            <h3 class="text-xl font-semibold text-white">${exp.title}</h3>
            <p class="text-gray-300">${exp.company} — ${exp.location}</p>
            <ul class="list-disc text-gray-400 text-sm mt-3 ml-5 space-y-1">
              ${exp.responsibilities.map(resp => `<li>${resp}</li>`).join('')}
            </ul>
          </div>
          <div class="w-4 h-4 bg-blue-400 border-2 border-white rounded-full z-10"></div>
          <div class="md:w-5/12 text-sm text-gray-400 text-left md:pl-10 order-1 md:order-none">
            <p class="italic text-base md:text-lg text-gray-400">${exp.duration}</p>
          </div>
        `;
      }
      desktopTimeline.appendChild(expItem);
    });
  }
  
  // Mobile experience
  const mobileExperience = document.querySelector('.experience-mobile');
  if (mobileExperience) {
    mobileExperience.innerHTML = '';
    contentData.experience.forEach(exp => {
      const expItem = document.createElement('div');
      expItem.className = 'flex flex-col md:flex-row md:items-start md:space-x-8';
      expItem.innerHTML = `
        <div class="mb-2 md:mb-0 md:w-1/3 text-sm text-blue-300 font-medium">
          <p>${exp.duration}</p>
        </div>
        <div class="bg-gray-800/70 backdrop-blur-sm p-5 rounded-xl shadow-md md:w-2/3">
          <h3 class="text-white font-semibold text-lg mb-1">${exp.title}</h3>
          <p class="text-gray-400 text-sm mb-2">${exp.company}, ${exp.location}</p>
          <ul class="list-disc list-inside text-gray-300 text-sm space-y-1">
            ${exp.responsibilitiesMobile.map(resp => `<li>${resp}</li>`).join('')}
          </ul>
        </div>
      `;
      mobileExperience.appendChild(expItem);
    });
  }
}

// Populate contact page
function populateContact() {
  if (!contentData) return;
  
  const { personal } = contentData;
  
  // Update availability text
  const availabilityText = document.getElementById('availability-text');
  if (availabilityText) {
    availabilityText.textContent = contentData.availability;
  }
}

// Populate footer
function populateFooter() {
  if (!contentData) return;
  
  const { personal } = contentData;
  
  // Update all email links
  document.querySelectorAll('a[href^="mailto:"]').forEach(link => {
    link.href = `mailto:${personal.email}`;
    if (link.textContent.includes('@')) {
      link.textContent = personal.email;
    }
  });
  
  // Update all phone links
  document.querySelectorAll('a[href^="tel:"]').forEach(link => {
    link.href = `tel:${personal.phone}`;
    if (link.textContent.match(/\d/)) {
      link.textContent = personal.phoneDisplay;
    }
  });
}

document.addEventListener("DOMContentLoaded", async function () {
  // Load content first
  await loadContent();
  
  // Populate content based on current page
  populateHero();
  populateCoreExpertise();
  populateFeaturedProjects();
  populateAbout();
  populateContact();
  populateFooter();
  
  // Initialize Swiper carousel AFTER populating slides
  if (document.querySelector('.swiper-container')) {
    new Swiper(".swiper-container", {
      slidesPerView: 1,
      spaceBetween: 20,
      loop: true,
      autoplay: {
        delay: 4000,
      },
      breakpoints: {
        640: {
          slidesPerView: 1,
        },
        768: {
          slidesPerView: 2,
        },
        1024: {
          slidesPerView: 3,
        },
      },
    });
  }
  
  // Initialize Typed.js
  initTyped();
  
  // Load projects
  loadProjects();
});

try {
  const menuBtn = document.getElementById("menu-btn");
  const sidebar = document.getElementById("sidebar");
  const overlay = document.getElementById("sidebar-overlay");
  const closeBtn = document.getElementById("close-sidebar");

  function openSidebar() {
    sidebar.classList.remove("-translate-x-full");
    overlay.classList.remove("hidden");
    document.body.classList.add("overflow-hidden");
  }

  function closeSidebar() {
    sidebar.classList.add("-translate-x-full");
    overlay.classList.add("hidden");
    document.body.classList.remove("overflow-hidden");
  }

  menuBtn.addEventListener("click", openSidebar);
  closeBtn.addEventListener("click", closeSidebar);
  overlay.addEventListener("click", closeSidebar);

  // Close on nav link click (for single-page UX)
  document.querySelectorAll("#sidebar a").forEach((link) => {
    link.addEventListener("click", closeSidebar);
  });
} catch (err) {
  console.error(err);
}
